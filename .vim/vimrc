"{{{1 setup
"set vimrc to .vim
let $MYVIMRC="$HOME/.vim/vimrc"
"augroup that get all autocmd
augroup vimrc
  autocmd!
augroup END
"Plugin Stuff {{{1
"{{{2 setup
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin(expand('~/.vim/plugged'))
"{{{2 theme plugin & eye candy stuff
  Plug 'joshdick/onedark.vim'
  Plug 'itchyny/lightline.vim'
  Plug 'nathanaelkane/vim-indent-guides'
  "highlighted yank
  Plug 'machakann/vim-highlightedyank'
  "{{{2 git stuff
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'
  "better edit and navigate{{{2
  Plug 'tpope/vim-obsession'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-repeat'
  Plug 'tmsvg/pear-tree'
  let g:pear_tree_repeatable_expand=0
  Plug 'mattn/emmet-vim'
  let g:user_emmet_leader_key = '<C-s>'
  Plug 'wellle/targets.vim'
  Plug 'justinmk/vim-dirvish'
  Plug 'andymass/vim-matchup'
  ""{{{matchup config
  "map ,z to z% avoid conflict with sneak
  nmap ,% <plug>(matchup-z%)
  "Enable surround
  let g:matchup_surround_enabled = 1
  omap ,% <plug>(matchup-o_)<plug>(matchup-z%)
  xmap ,% <plug>(matchup-z%)
  ""}}}
  Plug 'justinmk/vim-sneak'
  Plug 'junegunn/fzf.vim'
  "Language {{{2
  Plug 'maxmellon/vim-jsx-pretty'
 let g:polyglot_disabled = ['jsx']
  Plug 'sheerun/vim-polyglot'
  Plug 'rust-lang/rust.vim'
  let g:rustfmt_autosave = 1
  "Lisp Stuff {{{3
  "{{{4 Edit
  Plug 'guns/vim-sexp'
  Plug 'tpope/vim-sexp-mappings-for-regular-people' "sane mappings for vim-sexp
  let g:sexp_filetypes = 'fennel,clojure,scheme,lisp,timl'
  "disable insert
  let g:sexp_enable_insert_mode_mappings=0
  let g:sexp_mappings = {
       \ 'sexp_flow_to_next_open':'<M-[>',
       \ 'sexp_flow_to_prev_open':'<M-{>',
       \ 'sexp_flow_to_next_close':'<M-]>',
       \ 'sexp_flow_to_prev_close':'<M-}>',
       \ 'sexp_select_prev_element':'',
       \ 'sexp_select_next_element': ''
       \}
  "}}}
  "rainbow
  Plug 'junegunn/rainbow_parentheses.vim' "colors paren cuz why not
  let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
  let g:rainbow#blacklist=[248,59,238]

  Plug 'bakpakin/fennel.vim' "Fennel
  Plug 'vlime/vlime', {'rtp': 'vim/'} "Common lisp
let g:vlime_enable_autodoc=v:true
let g:vlime_window_settings = {
      \ "sldb": { "pos": "belowright", "vertical": v:false },
      \ "xref": { "pos": "belowright", "size": 5, "vertical": v:false },
      \ "repl": { "pos": "belowright", "size": 10, "vertical": v:false },
      \ "inspector": { "pos": "belowright", "vertical": v:false },
      \ "arglist": { "pos": "botright", "size": 1, "vertical": v:false }
      \ }
  "Clojure {{{4
  Plug 'w0rp/ale',{'for' : 'clojure'} "linter for clojure
  Plug 'clojure-vim/clojure.vim'
  let g:clojure_fuzzy_indent_patterns = [
        \ '^with', '^def', '^let', '^\w\+-let'
        \ ]
  if has("nvim")
  Plug 'Olical/conjure'
  let g:conjure#log#wrap = v:true
  let g:conjure#mapping#prefix = ","
  let g:conjure#mapping#eval_motion= ["cp"]
  let g:conjure#client#clojure#nrepl#completion#cljs#use_suitable = v:false
  endif
  "{{{2 nvim only
  if has('nvim')
    Plug 'norcalli/nvim-colorizer.lua'
    Plug 'neovim/nvim-lspconfig'
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
    Plug 'nvim-treesitter/playground'
    Plug 'nvim-lua/completion-nvim'
    "Plug 'lambdalisue/suda.vim'
    "  let g:suda_smart_edit=1
  endif
call plug#end()

"{{{1 config
"{{{2 some sanity
set ttyfast
set encoding=UTF-8
set hidden
set relativenumber number
set laststatus=2 "Always have statusline
set showcmd
"set noswapfile
set updatetime=200
set shortmess+=c
set signcolumn=yes
set ruler
set lazyredraw
set mouse=a "use mouse
set nostartofline
"No auto comment code
autocmd vimrc FileType * set formatoptions-=cro
"fast switch between mode
set ttimeout
set ttimeoutlen=10
" }}}
"search stuff{{{
"ignore directory & and cases
set wildignore+=**/node_modules/**,**/.git/**
set wildignorecase
set path+=.,** "better find use case
"set wild menu for vim and popup for nvim
set wildmenu
set ignorecase
set smartcase "only smart when i told u to
"{{{use rg as vimgrep
if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading\ --smartcase
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif
"}}}
"increment hightlight when search
set incsearch
set hlsearch
"nvim specific
if has("nvim")
  set wildoptions=pum
  set pumblend=20
  set inccommand=nosplit
  highlight SignColumn guibg=none
  highlight ColorColumn guibg=LightGray
endif
"}}}
"{{{backup and undo
"no backup pls, me use git
set nobackup
set nowritebackup
"but i do use undo
set undofile
set undodir=$HOME/.vim/file/undo
set undolevels=1000
set undoreload=10000
set sessionoptions-=options
"}}}
"{{{split tab window UI related
"Fold default to indent
set foldmethod=indent
set foldlevelstart=99
"better split
set splitbelow
set splitright
"set scroll off, cursor never go to end of viewport
set scrolloff=5
"80 char/line
set textwidth=0
set colorcolumn=80
set linebreak
"set clipboard to +
set clipboard=unnamedplus
"Normal backspace over autoindent, line break,
set backspace=indent,eol,start
  "auto remove trailing spaces
autocmd vimrc BufWritePre * %s/\s\+$//e
  "auto Resize when inside tmux
autocmd vimrc VimResized * :wincmd=
" }}}
"{{{2 indent
set softtabstop=2
set shiftwidth=2
set shiftround
set expandtab
set smarttab
set autoindent
set cindent
filetype plugin indent on
"{{{1 ColorScheme and theme
"256-color for st and friends
if exists('+termguicolors') || ($TERM == "tmux-256color")
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      set termguicolors
    if has("nvim")
      lua require'colorizer'.setup()
    endif
endif
colorscheme onedark
set cursorline
set bg=dark
set noshowmode "cuz i already use lightline
"hidden char stuff
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:·
"set list "show white space as a character
"set cursor for vim
if !has("nvim")
  let &t_SI = "\<Esc>[6 q"
  let &t_SR = "\<Esc>[4 q"
  let &t_EI = "\<Esc>[2 q"
endif
"{{{1 lua
if has("nvim")
  lua require'config'.setup()
autocmd vimrc BufEnter * lua require'completion'.on_attach()
endif
"{{{1 Mapping
let mapleader=" "
let maplocalleader=","
nnoremap <M-;> ,
" turn off hlseacrh until next search
nnoremap <ESC><ESC> :nohlsearch<CR>
nnoremap ' `
nnoremap ` '
  "Pause Obsession then quit all
nnoremap ZS :Obsession<CR>:xa<CR>
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap ]w gt
nnoremap [w gT
nnoremap Q gq
" Copy paste from clipboard
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
map <Leader>P "+P
vmap <Leader>y "+y
"make Y behavior like C, D
nnoremap Y y$
if !has("nvim") " mapping for vim only
  cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!
endif
" Easy close help
autocmd vimrc Filetype help nnoremap <buffer> q :q<CR>
" Save last help location
" Easy close commandline window (the q: one )
autocmd vimrc CmdwinEnter * nmap <buffer> <esc><esc> :q<cr>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>o :FZF<CR>
"move line by line
"https://www.reddit.com/r/vim/comments/i8b5z1/
"s for up d for down a for left f for right
nnoremap <A-s> :<C-u>move-2<CR>==
nnoremap <A-d> :<C-u>move+<CR>==
xnoremap <A-s> :move-2<CR>='[gv
xnoremap <A-d> :move'>+<CR>='[gv
" auto complete stuff

if has("nvim")
imap <tab> <Plug>(completion_smart_tab)
imap <s-tab> <Plug>(completion_smart_s_tab)
imap <silent> <c-space> <Plug>(completion_trigger)
set completeopt=menuone,noinsert,noselect
set shortmess+=c
let g:completion_auto_change_source = 1
let g:completion_chain_complete_list = {
    \ 'clojure': [
    \    {'mode': 'omni'},
    \    {'mode': '<c-p>'},
    \    {'mode': '<c-n>'}
    \],
    \ 'lisp': [
    \    {'mode': 'omni'},
    \    {'mode': '<c-p>'},
    \    {'mode': '<c-n>'}
    \],
    \ 'default': [
    \    {'complete_items': ['lsp', 'snippet']},
    \    {'mode': '<c-p>'},
    \    {'mode': '<c-n>'}
    \]
\}
let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy', 'all']
let g:completion_trigger_keyword_length = 3 " default = 1
imap <m-j> <Plug>(completion_next_source)
imap <m-k> <Plug>(completion_prev_source)
endif

"clojure/lisp config {{{1
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme,fennel RainbowParentheses
augroup END
"{{{1 STATUS LINE/LIGHTLINE
"{{{ Check styling under the cursor with Leader1
" Shamelessly taken from https://github.com/tpope/vim-scriptease
function! FaceNames(...) abort
  if a:0
    let [line, col] = [a:1, a:2]
  else
    let [line, col] = [line('.'), col('.')]
  endif
  return reverse(map(synstack(line, col), 'synIDattr(v:val,"name")'))
endfunction

function! DescribeFace(count) abort
  if a:count
    let name = get(FaceNames(), a:count-1, '')
    if name !=# ''
      return 'syntax list '.name
    endif
  else
    echo join(FaceNames(), ' ')
  endif
  return ''
endfunction

nnoremap <leader>1 :<C-U>exe DescribeFace(v:count)<CR>
"}}}
"{{{ restore location
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd vimrc BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
"}}}
"{{{DrawGitBranchInfo
function! DrawGitBranchInfo()
  let branch = fugitive#head()
  return len(branch) > 0 ? " " . branch : ""
endfunction

function! LightLineFilename()
  let name = ""
  let subs = split(expand('%'), "/")
  let i = 1
  for s in subs
    let parent = name
    if  i == len(subs)
      let name = len(parent) > 0 ? parent . '/' . s : s
    elseif i == 1
      let name = s
    else
      let part = strpart(s, 0, 10)
      let name = len(parent) > 0 ? parent . '/' . part : part
    endif
    let i += 1
  endfor
  return name
endfunction
"}}}
let g:lightline = {
     \'colorscheme': 'onedark',
      \'active': {
      \   'left': [ ['filetype'], [ 'filename' ] ],
      \   'right': [ [ 'icongitbranch'], ['lineinfo' ,'sessionstatus']]
      \ },
      \ 'inactive': {
      \   'left': [ [], ['fileicon'], [ 'filename' ] ],
      \   'right': []
      \ },
      \ 'tabline' : {
      \   'left': [['tabs']],
      \   'right': [['close']]
      \},
      \ 'component': { 'lineinfo': ' %2p%% %3l:%-2v' },
      \ 'component_function': {
      \   'icongitbranch': 'DrawGitBranchInfo',
      \   'iconline': 'DrawLineInfo',
      \   'gitbranch': 'fugitive#head',
      \   'cocstatus': 'coc#status',
      \   'filename': 'LightLineFilename',
      \   'sessionstatus':'ObsessionStatus'
      \ },
      \ }
" vim: set foldmethod=marker foldlevel=0 nomodeline:
